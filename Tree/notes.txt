what is recursion ?
a function that calls itself until it doesn't
( gift box analogy )
def open_gift_box():
   if ball :
      return ball
   open_gift_box()

( a working condition as base condition with return
statement should be there to avoid stack overflow )

---------------------------------------------------
1. Breadth-First Search (BFS)
Description: BFS traverses level by level, visiting all nodes at one depth before moving to the next.
Use Cases:
Shortest Path Problems: Useful in unweighted graphs/trees when you need the shortest path to a target node.
Example: Finding the closest target node in a maze/tree.
Layered Analysis: When you need to process nodes layer by layer.
Example: Organizing data by hierarchy (e.g., corporate org charts).
Serialization/Deserialization of Trees: Often used for storing trees in a format that preserves structure.
Finding All Nodes at a Level:
Example: Finding all employees at a certain level in an organization.
2. Depth-First Search (DFS)
DFS has three variants based on the order of visiting nodes:


a) Preorder (Root → Left → Right)
Description: The root is visited first, followed by the left subtree, then the right subtree.
Use Cases:
Copying or Cloning a Tree: Preorder ensures the root is processed first, which is essential for cloning.
Expression Trees: Used for generating prefix notation (e.g., "+ A B").
Serialization of Trees: Captures the structure of a tree where parent nodes are stored before their children.
Pathfinding: When you need to explore all paths that start at the root.


b) Inorder (Left → Root → Right)
Description: The left subtree is visited first, then the root, followed by the right subtree.
Use Cases:
Binary Search Trees (BSTs): Produces sorted order of elements in a BST.
Example: Inorder traversal is used for iterating through BST elements in ascending/descending order.
Sorting and Ranking: When the tree structure represents sorted data (e.g., priority queues or interval trees).


c) Postorder (Left → Right → Root)
Description: Both left and right subtrees are visited before the root.
Use Cases:
Deleting Nodes in a Tree: Ensures children are processed before their parent.
Example: Deleting a directory structure where files must be deleted before folders.
Expression Trees: Used for generating postfix notation (e.g., "A B +").
Dependency Resolution: Ensures all dependencies are resolved before processing a parent node.
Example: Task scheduling where tasks have dependencies.


Comparison Table

Traversal	               Primary Focus                	Best Use Cases
BFS	                       Level-order traversal            Shortest path,level-wise processing
DFS Preorder	           Process root before subtrees	    Cloning, prefix notation, tree serialization
DFS Inorder	               Process left-to-right (sorted)	BST traversal, sorted data processing
DFS Postorder	           Process children before root	    Deletion, postfix notation, dependency resolution



Which One to Use?
BFS: Use when you care about proximity or level-wise processing.
DFS Preorder: Use when the root-to-leaf relationship is significant, like in cloning or prefix evaluation.
DFS Inorder: Use when working with sorted data or BSTs.
DFS Postorder: Use when child nodes must be fully processed before the parent, like in dependency resolution or deletion tasks.


Example Scenarios
Task Scheduling: Postorder ensures all dependencies are processed before the task.
Searching for Closest Element: BFS guarantees the shortest path in unweighted graphs.
Sorting Data from a BST: Inorder traversal processes elements in sorted order.
Prefix Evaluation of Expressions: Preorder helps generate prefix notation for computation.
Each traversal has its niche, and choosing the right one depends on the problem's structure and requirements.

